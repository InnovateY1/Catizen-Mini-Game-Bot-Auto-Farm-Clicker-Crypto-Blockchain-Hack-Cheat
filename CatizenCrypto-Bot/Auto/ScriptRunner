function shuffle(array, excludeIndices) {
    let filteredArray = array.filter((_, index) => !excludeIndices.includes(index));

    for (let i = filteredArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [filteredArray[i], filteredArray[j]] = [filteredArray[j], filteredArray[i]];
    }

    let resultArray = [];
    let shuffleIndex = 0;

    for (let i = 0; i < array.length; i++) {
        if (excludeIndices.includes(i)) {
            resultArray.push(array[i]);
        } else {
            resultArray.push(filteredArray[shuffleIndex]);
            shuffleIndex++;
        }
    }
    return resultArray;
}

function performShuffle() {
    //const getCountSuccess = document.querySelectorAll('div.border-emerald-400, div.border-rose-400, div.border-blue-400');
    const getCountSuccess = document.querySelectorAll('div.border-emerald-400.text-emerald-400');
    const count = getCountSuccess.length;
    if (count < 12) {
        const elements = document.querySelectorAll('[data-index]');
        const values = Array.from(elements).map(el => el.querySelector('.truncate').innerText);

        const excludeIndices = Array.from(elements).map((el, index) =>
            el.classList.contains('border-emerald-400') && el.classList.contains('text-emerald-400') ? index : -1
        ).filter(index => index !== -1);

        //shuffle
        const shuffledValues = shuffle(values, excludeIndices);
        shuffledValues.forEach((value, index) => {
            elements[index].querySelector('.truncate').innerText = value;
        });
    }
}

function fillDate(emeraldValues = [], emeraldClasses = [], otherValues = [], otherClasses = []) {
    if (emeraldValues.length > 0 || emeraldClasses.length > 0 || otherValues.length > 0 || otherClasses.length > 0) {
        // Collect all elements with the data-index attribute
        const elements = document.querySelectorAll('[data-index]');

        // Shuffle the otherValues while keeping emerald elements in place
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        shuffleArray(otherValues);

        // Update elements with shuffled values and restore classes
        elements.forEach(el => {
            const index = el.dataset.index;
            const emeraldElement = emeraldClasses.find(e => e.index === index);
            const otherElement = otherClasses.find(e => e.index === index);

            if (emeraldElement) {
                el.querySelector('.truncate').innerText = emeraldElement.text;
                el.className = emeraldElement.classes;
            } else if (otherElement) {
                el.querySelector('.truncate').innerText = otherValues.shift();
                el.className = otherElement.classes;
            }
        });
    }
}

function getAllKeyword() {
    const elements = document.querySelectorAll('[data-index]');

    const emeraldElements = [];
    const otherElements = [];

    const emeraldValues = [];
    const emeraldClasses = [];
    const otherValues = [];
    const otherClasses = [];

    elements.forEach(el => {
        const text = el.querySelector('.truncate').innerText;
        const classes = el.className;
        const index = el.dataset.index;

        if (el.classList.contains('border-emerald-400') && el.classList.contains('text-emerald-400')) {
            emeraldElements.push({ index, text, classes });
            emeraldValues.push(text);
            emeraldClasses.push(classes);
        } else {
            otherElements.push({ index, text, classes });
            otherValues.push(text);
            otherClasses.push(classes);
        }
    });

    console.log("otherElements :", otherElements);
    console.log("otherValues :", otherValues);
    console.log("emeraldElements :", emeraldElements);
    console.log("emeraldValues :", emeraldValues);
}

function shuffleData() {
    return new Promise((resolve) => {
        setTimeout(function () {
            performShuffle();
            resolve();
        }, 4000);
    });
}

function checkCurrectData() {
    return new Promise((resolve) => {
        setTimeout(function () {
            const button = document.querySelector('.btn.bg-brand.rounded-2xl.p-1.block.relative.w-full.text-xl.font-semibold');
            if (button) {
                //button.click();
                console.log("Button Clicked...");
            } else {
                console.log('Button not found');
            }

            resolve();
        }, 1000);
    });
}

function insertNewData(emeraldValues = [], emeraldClasses = [], otherValues = [], otherClasses = []) {
    return new Promise((resolve) => {
        setTimeout(function () {
            fillDate(emeraldValues, emeraldClasses, otherValues, otherClasses);
            resolve();
        }, 1000);
    });
}

function getKeywords() {
    return new Promise((resolve) => {
        setTimeout(function () {
            getAllKeyword();
            resolve();
        }, 1000);
    });
}

async function executeWithDelay(i) {

    if (i == 1) {
        const emeraldValues = [];
        const emeraldClasses = [];
        const otherValues = [];
        const otherClasses = [];

        if (emeraldValues.length > 0 || emeraldClasses.length > 0 || otherValues.length > 0 || otherClasses.length > 0) {
            await insertNewData(emeraldValues, emeraldClasses, otherValues, otherClasses);
        }
    }

    if (i >= 3) {
        getKeywords();
        return;
    }
    console.log('strat number: ' + i);
    await shuffleData();
    await checkCurrectData();

    executeWithDelay(i + 1);
}

//Start 
executeWithDelay(1);